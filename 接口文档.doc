
人工智能教学平台项目接口文档
Attention！
服务器 ip + 端口：47.96.95.75:7001，仅供测试，慎用！

一、学生登录模块
1.1 学生登录接口   
1.  请求地址：/api/v1/login

2.  请求方法：POST

3.  请求参数

参数名	参数类型	是否必填	描述
			
user_id	int	是	用户id，具有唯一性
测试号：311700100
password	String	是	 用户密码，两者都不为空
测试密码：123

4.  响应信息

名称	参数类型	描述
		
HTTP状态码	--	状态码，详见附录HTTP状态码
200：登录成功  400：登录失败
msg	String	 响应返回的信息说明
data	Json	响应返回的参数
		

5.  响应示例



1.2 验证学生是否登录接口
1. 请求地址：/api/v1/verifyUser

2. 请求方法：GET

3. 响应信息

名称	参数类型	描述
		
状态码	--	状态码
200：用户已登录  401：用户未登录
msg	String	 响应返回的信息说明
username	String	用户名

4.  响应示例


1.3 学生登出接口
1.请求地址：/api/v1/logout

2.请求方法：GET

3.响应信息

名称	参数类型	描述
		
状态码	--	状态码
200：注销成功  400：注销失败
msg	String	 响应返回的信息说明

4.  响应示例



二、管理员登录模块
2.1 管理员登录接口
1.  请求地址：/api/v1/admin/login

2.  请求方法：POST

3.  请求参数

参数名	参数类型	是否必填	描述
			
name	String	是	用户名，具有唯一性，
测试号：admin
password	String	是	 用户密码，两者都不为空
测试密码：123

4.  响应信息

名称	参数类型	描述
		
HTTP状态码	--	状态码，详见附录HTTP状态码
200：登录成功  400：登录失败
msg	String	 响应返回的信息说明
data	Json	响应返回的参数
		

5.  响应示例


2.2 验证管理员是否登录接口
1.  请求地址：/api/v1/admin/verifyAdmin

2.  请求方法：GET

3.  响应信息

名称	参数类型	描述
		
状态码	--	状态码
200：用户已登录  401：用户未登录
msg	String	 响应返回的信息说明
name	String	用户名

4.  响应示例



2.3 管理员登出接口
1.  请求地址：/api/v1/admin/logout

2.  请求方法：GET

3.  响应信息

名称	参数类型	描述
		
状态码	--	状态码
200：注销成功  400：注销失败
msg	String	 响应返回的信息说明

4.  响应示例



三、学生信息模块
3.1 获取当前学生信息（不含选课）接口
1.  请求地址：/api/v1/userMsg

2.  请求方法：GET

3.  响应信息

名称	参数类型	描述
		
HTTP状态码	--	状态码，详见附录HTTP状态码
200：获取学生信息成功  
                 400：获取学生信息失败
msg	String	 响应返回的信息说明
data	json	响应返回的参数
		

4.  响应示例


3.2 获取新增学生的起始 id 接口
Tips：管理员页面使用

1.  请求地址：/api/v1/admin/stuId

2.  请求方法：GET

3.  响应信息

名称	参数类型	描述
HTTP状态码	--	状态码，详见附录HTTP状态码
200：获取信息成功  
                    400：获取信息失败
msg	String	 响应返回的信息说明
begin_id	int	新增学生起始id 

4.  响应示例


3.3 获取所有学生信息（含选课）接口
Tips：管理员页面使用

1.  请求地址：/api/v1/admin/stuInfo

2.  请求方法：GET

3.  响应信息

名称	参数类型	描述
HTTP状态码	--	状态码，详见附录HTTP状态码
200：修改项目信息成功  
                 400：修改项目信息失败
msg	String	 响应返回的信息说明
data	Array	返回的所有学生数据

4.  响应示例



3.4 上报学生信息（含选课）接口
Tips：管理员页面使用

1.  请求地址：/api/v1/admin/stuInfo

2.  请求方法：POST

3.  请求参数

参数名	参数类型	是否必填
（填需要更改的参数）	描述
			
info	JSON 	是	包含新增的学生信息、对应的选课信息
json数组的参数





4.  响应信息

名称	参数类型	描述
HTTP状态码	--	状态码，详见附录HTTP状态码
200：上报数据成功  
                    400：上报数据失败
msg	String	 响应返回的信息说明

5.  响应示例



3.5 修改学生信息（含选课）接口
Tips：管理员页面使用

1.  请求地址：/api/v1/admin/stuInfo/1

Tips：这里的1是为了前端方便上传所有待修改数据，考虑到批量修改数据量大，不一一请求。本来的正确使用方法是 / 后加学生id，也就是1本来应该表示学生id。这里特殊处理，按地址请求即可。

2.  请求方法：PUT

3.  请求参数

参数名	参数类型	是否必填
（填需要更改的参数）	描述
			
info	JSON 
Array

	是	包含新增的学生信息、对应的选课信息
json数组的参数






4.  响应信息

名称	参数类型	描述
HTTP状态码	--	状态码，详见附录HTTP状态码
200：上报数据成功  
                    400：上报数据失败
msg	String	 响应返回的信息说明

5.  响应示例




3.6 删除学生信息（含选课）接口
Tips：其实就是删除整个学生账号，管理员页面使用

1.  请求地址：/api/v1/admin/stuInfo/:id

2.  请求方法：DELETE

3.  请求参数  

参数名	参数类型	是否必填	描述
			
user_id	int	是	学生id


4.  响应信息

名称	参数类型	描述
HTTP状态码	--	状态码，详见附录HTTP状态码
200：删除学生账号成功  
                 400：删除学生账号失败
msg	String	 响应返回的信息说明

5.  响应示例



四、学生学习记录模块
4.1 获取学生学习时间记录接口
1. 请求地址：/api/v1/record/time

2. 请求方法：GET

3. 响应信息

名称	参数类型	描述
		
HTTP状态码	--	状态码，详见附录HTTP状态码
200：获取学习记录信息成功  
                 400：获取学习记录信息失败
msg	String	 响应返回的信息说明
data	json	响应返回的参数
		

4.响应示例



4.2 获取学生课程学习进度记录接口
1. 请求地址：/api/v1/record/progress

2. 请求方法：GET

4. 响应信息

名称	参数类型	描述
		
HTTP状态码	--	状态码，详见附录HTTP状态码
200：获取学习记录信息成功  
                 400：获取学习记录信息失败
msg	String	 响应返回的信息说明
data	json	响应返回的参数
		


5.响应示例




4.3 获取学生课程学习进度（包含所有课程）接口
Tips：此接口是为了方便前端渲染

1. 请求地址：/api/v1/record/courseProgress

2. 请求方法：GET

3. 响应信息
名称	参数类型	描述
		
HTTP状态码	--	状态码，详见附录HTTP状态码
200：获取学习记录信息成功  
                 400：获取学习记录信息失败
msg	String	 响应返回的信息说明
data	json	响应返回的参数
		
4. 响应示例




4.4 删除学生学习记录接口
Tips：不删除学习日期，只删除进度。url 传递参数


1. 请求地址：/api/v1/record

2. 请求方法：Delete

3. 请求参数

名称	参数类型	描述
		
course_id	int	 课程id


4. 响应信息

名称	参数类型	描述
		
HTTP状态码	--	状态码，详见附录HTTP状态码
200：获取成功  
                 400：获取失败
msg	String	 响应返回的信息说明


1. 响应示例



Tips：

用户点击开始学习——>开始记录学习起始时间——>用户点击下一步骤，上报数据

学生点击开始学习后，前端获取系统当前时间，开始记录学习时长。之后学生点击下一步骤时，根据此接口上报学习进度（就是他学到了哪个项目的哪个步骤）与学习时长。
因为担心学生在页面学习时，只看了第一步骤，然后也没点下一步骤，这时无法上报数据，所以初步的解决方案是：
进入学习页面后3分钟上报一次，或者定时器。这里就会有个问题。

前端需解决的问题：
如何记录学习时长？localStorage还是内存？能否做到在网页退出时上报学习时长？

4.5 上报学生学习时长接口
1.  请求地址：/api/v1/record/time

2.  请求方法：POST

3.  请求参数

参数名	参数类型	是否必填	描述
			
time	int	是	当天某次在网页上的学习时长，
单位为min

4.  响应信息

名称	参数类型	描述
		
HTTP状态码	--	状态码，详见附录HTTP状态码
200：上报成功  400：上报失败
msg	String	 响应返回的信息说明

5.  响应示例



4.6 上报学生学习进度接口
1.  请求地址：/api/v1/record/progress

2.  请求方法：POST

3.  请求参数

参数名	参数类型	是否必填	描述
course_id	int	是	章节id
project_id	int	是	项目id
current_step	int	是	当前学到的步骤id

4.  响应信息

名称	参数类型	描述
HTTP状态码	--	状态码，详见附录HTTP状态码
200：上报成功  400：上报失败
msg	String	 响应返回的信息说明

5.  响应示例




五、章节模块
Tips：
所有课程（就是章节）遵循以下结构：
章节 -> 项目 -> 步骤 

5.1 获取学生可见的所有章节信息接口(学生页面使用)
1.  请求地址：/api/v1/course

2.  请求方法：GET

3.  响应信息

名称	参数类型	描述
		
HTTP状态码	--	状态码，详见附录HTTP状态码
200：获取信息成功  
                 400：获取信息失败
msg	String	 响应返回的信息说明
data	json	响应返回的参数
		

4.  响应示例




5.2 获取所有章节信息接口(管理员页面使用)
1.  请求地址：/api/v1/admin/course/all_courses

2.  请求方法：GET

3.  响应信息

名称	参数类型	描述
		
HTTP状态码	--	状态码，详见附录HTTP状态码
200：获取信息成功  
                 400：获取信息失败
msg	String	 响应返回的信息说明
data	json	响应返回的参数
		

4.  响应示例




5.3 获取分类的章节信息接口
Tips：学生页面、管理员页面均可使用

1.  请求地址：/api/v1/course?tag=

2.  请求方法：GET

3.  请求参数：

参数名	参数类型	是否必填	描述
tag	string	是	标签内容

    目前已有标签：
Python
Linux
OpenCV
TensorFlow
图像识别
语音识别
物联网

4.  响应信息

名称	参数类型	描述
		
HTTP状态码	--	状态码，详见附录HTTP状态码
200：获取分类信息成功  
                 400：获取分类信息失败
msg	String	 响应返回的信息说明
data	json	响应返回的参数
		

5.  响应示例



5.4 新建章节信息接口
Tips：管理员页面使用

1.  请求地址：/api/v1/course

2.  请求方法：POST

3.  请求参数 

参数名	参数类型	是否必填	描述
			
formData	file对象	是	FromData表单上传，包含file对象
formData需要append的参数
course_name	String	是	章节名称
description	String	是	 章节介绍
tag	String 	是	标签，多个标签则用'&'隔开
例如 "Linux&Python"
image	file	是	章节介绍图


4.  响应信息

名称	参数类型	描述
HTTP状态码	--	状态码，详见附录HTTP状态码
200：新建章节成功  
                    400：新建章节失败
msg	String	 响应返回的信息说明
course_id	int	新建的章节id


5.  响应示例



5.5 修改章节信息接口
Tips：管理员页面使用

1.  请求地址：/api/v1/course/:id

2.  请求方法：PUT

3.  请求参数

参数名	参数类型	是否必填
（填需要更改的参数）	描述
			
course_id	String	是	章节id，具有唯一性
动态路由传值，:id即为所传id值
例如/api/v1/course/1表示请求的course_id为1
FormData模拟表单上传，按需确定 append 以下参数，
如果用户什么都没有修改，则不请求此接口
course_name	String	否	章节名称
description	String	否	 章节介绍
tag	String 	否	标签，多个标签则用'&'隔开
例如 "Linux&Python"
image	file	否	章节介绍图

4.  响应信息

名称	参数类型	描述
HTTP状态码	--	状态码，详见附录HTTP状态码
200：修改章节信息成功  
                 400：修改章节信息失败
msg	String	 响应返回的信息说明

5.  响应示例



5.6 删除章节信息接口
Tips：管理员页面使用

1.  请求地址：/api/v1/course/:id

2.  请求方法：DELETE

3.  请求参数  


参数名	参数类型	是否必填	描述
			
course_id	int	是	所属章节id


4.  响应信息

名称	参数类型	描述
HTTP状态码	--	状态码，详见附录HTTP状态码
200：删除章节成功  
                    400：删除章节失败
msg	String	 响应返回的信息说明

5.  响应示例



5.7 获取学生可见的所有标签信息接口
Tips：学生页面使用

1.  请求地址：/api/v1/courseTag

2.  请求方法：GET

3.  Tips

    目前已有标签：
Python
Linux
OpenCV
TensorFlow
图像识别
语音识别
物联网

4.  响应信息

名称	参数类型	描述
		
HTTP状态码	--	状态码，详见附录HTTP状态码
200：获取分类信息成功  
                 400：获取分类信息失败
msg	String	 响应返回的信息说明
data	json	响应返回的参数
		

5.  响应示例




5.8 获取所有章节标签信息接口
Tips：管理员页面使用

1.  请求地址：/api/v1/admin/courseTag

2.  请求方法：GET

3.  Tips

    目前已有标签：
Python
Linux
OpenCV
TensorFlow
图像识别
语音识别
物联网

4.  响应信息

名称	参数类型	描述
		
HTTP状态码	--	状态码，详见附录HTTP状态码
200：获取分类信息成功  
                 400：获取分类信息失败
msg	String	 响应返回的信息说明
data	json	响应返回的参数
		

5.  响应示例





六、项目模块
6.1 获取指定章节的所有项目信息接口
Tips：学生、管理员页面均可使用

1.  请求地址：/api/v1/course/:id

2.  请求方法：GET

3.  请求参数

参数名	参数类型	是否必填	描述
			
id	int	是	章节id，具有唯一性
请求示例：/api/v1/course/1
表示参数id为1


4.  响应信息

名称	参数类型	描述
		
HTTP状态码	--	状态码，详见附录HTTP状态码
200：获取分类信息成功  
                 400：获取分类信息失败
msg	String	 响应返回的信息说明
data	json	响应返回的参数
		

5.  响应示例




6.2 获取指定项目具体信息接口
Tips：学生、管理员页面均可使用

1.  请求地址：/api/v1/project?course_id= &project_id=

2.  请求方法：GET

3.  请求参数

参数名	参数类型	是否必填	描述
			
course_id	int	是	章节id，具有唯一性
测试id：3
project_id	int	是	项目id，不具有唯一性
测试id：1


4.  响应信息

名称	参数类型	描述
		
HTTP状态码	--	状态码，详见附录HTTP状态码
200：获取项目信息成功  
                 400：获取项目信息失败
msg	String	 响应返回的信息说明
data	json	响应返回的参数
		


5.  响应示例




6.3 修改项目信息接口
Tips：先根据6.2 获取要修改的项目信息，相当查看一篇已经发布的md，只不过可以编辑。管理员页面使用

1.  请求地址：/api/v1/project

2.  请求方法：PUT

3.  请求参数

参数名	参数类型	是否必填
（填需要更改的参数）	描述
			
course_id	int	是	项目所属章节id，具有唯一性
project_id	int	是	项目id，也是项目在所属章节中的序号
project_name	String	否	项目名称
description	String	否	 项目内容（不是具体内容，是简介）
markdown	String	否	项目md字符串
steps	Array	否	项目步骤


4.  响应信息

名称	参数类型	描述
HTTP状态码	--	状态码，详见附录HTTP状态码
200：修改项目信息成功  
                 400：修改项目信息失败
msg	String	 响应返回的信息说明

5.  响应示例




6.4 修改项目顺序接口
Tips：管理员页面使用

1.  请求地址：/api/v1/project/order

2.  请求方法：PUT

3.  请求参数

参数名	参数类型	是否必填
（填需要更改的参数）	描述
			
course_id	int	是	项目所属章节id，具有唯一性
project_order	Array	是	项目顺序数组，
数组顺序就是项目顺序，
值为项目id，值为int


4.  响应信息

名称	参数类型	描述
HTTP状态码	--	状态码，详见附录HTTP状态码
200：修改项目顺序成功  
                 400：修改项目顺序失败
msg	String	 响应返回的信息说明

5.  响应示例



6.5 删除项目信息接口
Tips：管理员页面使用

1.  请求地址：/api/v1/project

2.  请求方法：DELETE

3.  请求参数  

参数名	参数类型	是否必填	描述
			
course_id	int	是	所属章节id
project_id	int	是	项目id，也是项目在所属章节中的序号


4.  响应信息

名称	参数类型	描述
HTTP状态码	--	状态码，详见附录HTTP状态码
200：删除章节成功  
                    400：删除章节失败
msg	String	 响应返回的信息说明

5.  响应示例




6.6 新建项目信息接口
Tips：管理员页面使用

1.  请求地址：/api/v1/project

2.  请求方法：POST

3.  请求参数

参数名	参数类型	是否必填	描述
			
course_id	int	是	项目所属章节id，具有唯一性
project_name	String	是	项目名称
description	String	是	 项目描述（不是具体内容，是简介）
markdown	String	是	项目md字符串
steps	Array	是	项目步骤数组


4.  响应信息

名称	参数类型	描述
HTTP状态码	--	状态码，详见附录HTTP状态码
200：新建项目成功  
                         400：新建项目失败
msg	String	 响应返回的信息说明
project_id	int	新建的项目id，也表示在所属章节中的序号

5.  响应示例




七、关于jupyter web
7.1 获取jupyter web路径
1.请求地址：/api/v1/jupyterUrl
2.请求方式：GET
3.响应信息：
名称	参数类型	描述
		
HTTP状态码	--	状态码，详见附录HTTP状态码
200：获取成功  
                       400：获取失败
msg	String	 响应返回的信息说明
url	String	响应返回的jupyter web 路径

4.响应示例：


八、关于图片和视频上传
8.1 markdown编辑器上传图片接口
Tips：管理员页面使用

1.  请求地址：/api/v1/admin/image/upload

2.  请求方法：POST

3.  请求参数

参数名	参数类型	是否必填	描述
			
formData	file对象	是	FromData表单上传，包含file对象
formData需要append的参数
image	file	是	模型预览图
image	file	是	模型预览图
... 如果有多个图片，依次添加，但是filename一定要统一是image


4.  响应信息

名称	参数类型	描述
HTTP状态码	--	状态码，详见附录HTTP状态码
200：上传成功  
                       400：上传失败
msg	String	 响应返回的信息说明
imageUrl	数组	响应返回的参数，如果多图片上传则包含多个相应的url

5.  响应示例




8.2 上传项目演示视频接口
Tips：管理员页面使用，不做修改的接口，上传同一课程的演示视频默认覆盖之前的视频

1.  请求地址：/api/v1/admin/video/upload

2.  请求方法：POST

3.  请求参数

参数名	参数类型	是否必填	描述
			
formData	file对象	是	FromData表单上传，包含file对象
formData需要append的参数，请严格按照顺序添加
course_id	int	是	项目所属章节id
project_id	int	是	项目id
video	file	是	项目演示视频
... 如果有多个视频，依次添加，但是filename一定要统一是video
video	file	是	项目演示视频


4.  响应信息

名称	参数类型	描述
HTTP状态码	--	状态码，详见附录HTTP状态码
200：上传成功  
                       400：上传失败
msg	String	 响应返回的信息说明
imageUrl	数组	响应返回的参数，如果多图片上传则包含多个相应的url

5.  响应示例







日志
 更新信息
1.上线部署现有代码，1.1、1.2、3.1、3.2、3.3接口已可使用        ——2019/7/26
2.完成接口 1.9、1.4、1.5、1.6、1.7、1.8 的开发，均已同步部署至服务器 
         ——2019/7/31
3.完成接口2.1、2.2、2.3、2.4、2.5、2.6、2.7、3.4、3.5的开发，更新接口1.1中的请求参数username改为user_id，测试账号见1.1有说明          ——2019/8/4
4.完成接口 2.11 的开发，更新接口3.4，增加分割后的md字符串，测试账号文档处有说明。
                                                                                 —— 2019/8/6
5.增加接口2.8，更新接口2.11返回内容
修改接口3.1 api地址
修改接口3.3 请求方式，改为get动态路由传值 
修改接口3.4 请求方式为get， query传值即?=
修改接口3.5 api地址
修改接口2.8 api地址
增加接口2.9、2.10、2.12、2.13、2.14、2.15
所有接口均已完成开发，且已部署至服务器
                                                
                                                                                                      ——2019/8/7
6.增加接口1.3
增加接口2.16
修改接口2.7返回内容，增加密码。管理员可见密码，密码不加密
修该接口2.5请求参数限制，选课可不选
              ——2019/8/11
7.增加接口1.10，2.17
                              ——2019/8/16
8.重新划分了一下模块，增加接口2.3、8.2。所有接口均已完成且部署至服务器
                                                                                                      ——2019/8/18


附录
HTTP状态码
状态码	状态码英文名称	中文描述
100	Continue	继续。客户端应继续其请求
101	Switching Protocols	切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到HTTP的新版本协议

200	OK	请求成功。一般用于GET与POST请求
201	Created	已创建。成功请求并创建或更新了新的资源
202	Accepted	已接受。已经接受请求，但未处理完成
203	Non-Authoritative Information	非授权信息。请求成功。但返回的meta信息不在原始的服务器，而是一个副本
204	No Content	无内容。服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档
205	Reset Content	重置内容。服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域
206	Partial Content	部分内容。服务器成功处理了部分GET请求

300	Multiple Choices	多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择
301	Moved Permanently	永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替
302	Found	临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI
303	See Other	查看其它地址。与301类似。使用GET和POST请求查看
304	Not Modified	未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源
305	Use Proxy	使用代理。所请求的资源必须通过代理访问
306	Unused	已经被废弃的HTTP状态码
307	Temporary Redirect	临时重定向。与302类似。使用GET请求重定向

400	Bad Request	请求失败
401	Unauthorized	未授权，请登录
402	Payment Required	登录已过期，请重新登录
403	Forbidden	服务器理解请求客户端的请求，但是拒绝执行此请求
404	Not Found	服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置"您所请求的资源无法找到"的个性页面
405	Method Not Allowed	客户端请求中的方法被禁止
406	Not Acceptable	服务器无法根据客户端请求的内容特性完成请求
407	Proxy Authentication Required	请求要求代理的身份认证，与401类似，但请求者应当使用代理进行授权
408	Request Time-out	服务器等待客户端发送的请求时间过长，超时
409	Conflict	服务器完成客户端的PUT请求是可能返回此代码，服务器处理请求时发生了冲突
410	Gone	客户端请求的资源已经不存在。410不同于404，如果资源以前有现在被永久删除了可使用410代码，网站设计人员可通过301代码指定资源的新位置
411	Length Required	服务器无法处理客户端发送的不带Content-Length的请求信息
412	Precondition Failed	客户端请求信息的先决条件错误
413	Request Entity Too Large	由于请求的实体过大，服务器无法处理，因此拒绝请求。为防止客户端的连续请求，服务器可能会关闭连接。如果只是服务器暂时无法处理，则会包含一个Retry-After的响应信息
414	Request-URI Too Large	请求的URI过长（URI通常为网址），服务器无法处理
415	Unsupported Media Type	服务器无法处理请求附带的媒体格式
416	Requested range not satisfiable	客户端请求的范围无效
417	Expectation Failed	服务器无法满足Expect的请求头信息

500	Internal Server Error	服务器内部错误，无法完成请求
501	Not Implemented	服务器不支持请求的功能，无法完成请求
502	Bad Gateway	作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应
503	Service Unavailable	由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的Retry-After头信息中
504	Gateway Time-out	充当网关或代理的服务器，未及时从远端服务器获取请求
505	HTTP Version not supported	服务器不支持请求的HTTP协议的版本，无法完成处理




/*失败示例*/
{
	msg: 用户密码不正确,
    data: {}  
}
/*成功示例*/
{
    msg: 登录成功,
    data: {
      username: xxx
    } 
}
/*失败示例*/
HTTP Status Code: 401
{
    msg: "用户未登录"  
}
/*成功示例*/
HTTP Status Code: 200
{
	msg: "用户已登录",
    username: "xxx"
}
/*失败示例*/
{
   "msg": "获取项目信息失败" 
}
/*成功示例*/ 
//请求参数请按{course_id: 1,project_id: 1}
{
  "msg": "获取项目信息成功", 
  "data": {
   
  }
}
/*失败示例*/
{
	'msg': '用户密码不正确'  
    //msg: '用户不存在'
}
/*成功示例*/
{
    'msg': '登录成功',
    'data': {
      'user_id': 311700100,
      'user_name': 'littlea'
    } 
}
/*失败示例*/
HTTP Status Code: 401
{
    "msg": "用户未登录"  
}
/*成功示例*/
HTTP Status Code: 200
{
    "msg": "用户已登录"  
    "user_id": 311700100,
 	"user_name": "littlea"   
}
/*失败示例*/
HTTP Status Code: 400
{
    "msg": "注销失败"  
}
/*成功示例*/
HTTP Status Code: 200
{
    "msg": "注销成功"  
}
/*失败示例*/
{
	"msg": '管理员密码不正确'  
    //msg: '用户不存在'
}
/*成功示例*/
{
    "msg": '登录成功',
    "data": {
      "name": "admin"
    } 
}
/*失败示例*/
HTTP Status Code: 401
{
    "msg": "管理员未登录"  
}
/*成功示例*/
HTTP Status Code: 200
{
 	"name": "admin"   
}
/*失败示例*/
HTTP Status Code: 400
{
    "msg": "注销失败"  
}
/*成功示例*/
HTTP Status Code: 200
{
    "msg": "注销成功"  
}
/*失败示例*/
{
   "msg": "获取 Jupyter 路径失败" 
}
/*成功示例*/ 
{
   "msg": "获取 Jupyter 路径成功"，
   "url": "http://47.96.95.75:8888/tree/311700100"
}
/*失败示例*/
{
    'msg': "用户信息获取失败"  
}
/*成功示例*/

{
	'msg': "用户信息获取成功",
   'data':{
     "stuName": 'littlea',
     "stuGrade": '一年级3班',
     "experimentsTime": '13',
     "effectiveTime": '90'
   }
}
/*失败示例*/
{
  "msg": "获取信息失败"
}
/*成功示例*/
{
	"msg": "获取信息成功",
  	"begin_id": 311700200
}
/*请求示例*/
"info": [
  {
	stuId:311700101,//学生ID，int,不允许重复，根据2.3接口获取起始id然后累加
    stuName:'littleb',//学生姓名
    password: "123", //初始登录密码,注意是string
    stuSchool:'广东工业大学',//所在学校
    stuGrade: '一年级',//string，表示年级，内容看你们
    stuClass: 1, //int ,1表示1班
    visable_course_id:[1,2,...]//选择的该学生可见的课程id数组，没有就不带
  }
  ...
]
/*失败示例*/
{
	msg: '上报数据失败'
}
/*成功示例*/
{
    msg: '上报数据成功' 
}
/*请求示例*/
"info": [
  {
      stuId:311700100,//学生ID，有改到信息的学生，必须带上参数
      stuName:'littleb',//学生姓名，有修改则带上参数
      password: "123", //有修改则带上参数,注意是string
      stuSchool:'广东工业大学',//所在学校，有修改则带上参数
      stuGrade: '一年级',//string，表示年级，有修改则带上参数
      stuClass: 1, //int ,1表示1班，有修改则带上参数
      visable_course_id:[1,2,...]
    //选择的该学生可见的课程id数组，有修改则带上参数，传的值会整个覆盖之前的
  }
  ...
]
/*失败示例*/
{
	msg: '上报数据失败'
}
/*成功示例*/
{
    msg: '上报数据成功' 
}
/*失败示例*/
{
   "msg": "删除学生账号失败" 
}
/*成功示例*/ 
{
   "msg": "删除学生账号成功"
}
/*失败示例*/
{
  "msg": "获取信息失败"
}
/*成功示例*/
{
	"msg": "获取信息成功",
  	"data": [
      {
        password:"123",
        stuName:'littlea',//学生姓名
    	stuId:311700100,//学生ID
    	stuSchool:'广东工业大学',//所在学校
    	stuGrade: '一年级',//string，表示年级
        stuClass: 1, //int ,1表示1班
        visable_course:[
      		{
        		course_name:'linux实训',
        		course_id:1
      		}
      		...
    	],//选择的该学生可见的课程
        hidden_course:[
      		{
        		course_name:'OpenCV实训',
        		course_id:2
      		}
      		...
    	],//选择的该学生不可见的课程
      },
      ...
    ]
}
/*失败示例*/
{
    'msg': "学习时间信息获取失败"  
}
/*成功示例*/
{
	"serialStu": 2,
    "bSerialStu": 3,
    "msg": "学习时间信息获取成功",
    "dateRecord": [
        {
            "date": "2019-7-30",
            "count": 90
        },
        {
            "date": "2019-7-29",
            "count": 45
        },
        {
            "date": "2019-6-30",
            "count": 60
        },
        {
            "date": "2019-6-29",
            "count": 20
        },
        {
            "date": "2019-6-28",
            "count": 30
        }
    ]
}
/*失败示例*/
HTTP Status Code: 400
{
    msg: "学习进度信息获取失败"  
}
/*成功示例*/
HTTP Status Code: 200
{
	msg: "学习进度信息获取成功",
    data:[
        {   "course_id": 1,
            "course_name": "操作环境-linux单元",
            "course_img": "/public/images/course/1.png",   
            "project_id": 1,
            "project_name": "Linux基础命令应用-洞察Linux系统",
            "current_step": 5,
            "project_progress": "5/5", //项目步骤学习进度
            "project_status": "finished"
        },
        {   "course_id": 1,
            "course_name": "操作环境-linux单元",
            "course_img": "/public/images/course/1.png",
            "project_id": 2,
            "project_name": "Linux压缩与解压应用-文件管理实现",
            "current_step": 1,
            "project_progress": "1/5", //项目步骤学习进度
            "project_status": "learning"
        },
        {
            "course_id": 2,
            "course_name": "AI编程-Python单元",
            "course_img": "/public/images/course_2/course2.png",
            "project_id": 1,
            "project_name": "Python编程界面与编程入门",
            "current_step": 3,
            "project_progress": "3/6",
            "project_status": "learning"
        }    
      ]
    }
}
/*失败示例*/
HTTP Status Code: 400
{
    msg: "删除学习记录失败"  
}
/*成功示例*/
HTTP Status Code: 200
{
	msg: "删除学习记录成功",
}
/*失败示例*/
{
	msg: '上报数据失败'
}
/*成功示例*/
{
    msg: '上报数据成功' 
}
/*失败示例*/
{
	msg: '上报数据失败'
}
/*成功示例*/
{
    msg: '上报数据成功' 
}
/*失败示例*/
HTTP Status Code: 400
{
    "msg": "获取课程进度失败"  
}
/*成功示例*/
HTTP Status Code: 200
{
    "msg": "获取课程进度成功",
    "data": [
        {
            "course_id": 1,
            "course_name": "操作环境-linux单元",
            "project_amount": 5,
            "data": 0.2
        },
        {
            "course_id": 2,
            "course_name": "AI编程-Python单元",
            "project_amount": 0,
            "data": 0
        },
        {
            "course_id": 3,
            "course_name": "图像处理-OpenCV单元",
            "project_amount": 0,
            "data": 0
        },
        {
            "course_id": 4,
            "course_name": "机器学习与深度学习-Tensorflow单元",
            "project_amount": 0,
            "data": 0
        },
        {
            "course_id": 5,
            "course_name": "AI项目实训单元（百度API）",
            "project_amount": 0,
            "data": 0
        },
        {
            "course_id": 6,
            "course_name": "AI云平台控制-物联网单元",
            "project_amount": 0,
            "data": 0
        },
        {
            "course_id": 7,
            "course_name": "行业应用单元（intel openvino）",
            "project_amount": 0,
            "data": 0
        }
    ]
}
/*失败示例*/
{
	msg: '获取章节信息失败'
}

/*成功示例*/
{
    msg: '获取章节信息成功'
    data: [
      {
        "active": true,	//除了全部，Linux等等都为false
        "course_name": "全部",
        "course_id": 1, 
        "course_description": "",
        "project_amount": 4, //包含的项目数
        "tag": ["全部"], //所属标签
        "image_url": "/public/images/course_1.jpg", //预览图路径
        "learn_amount": 6666 //已参加学习人数，目前是假数据
        },
      ...
      } 
   ]
},

/*失败示例*/
{
   "msg": "新建章节失败" 
}
/*成功示例*/ 
{
   "msg": "新建章节成功", 
   "course_id": 7
}
/*失败示例*/
{
   "msg": "删除章节失败" 
}
/*成功示例*/ 
{
   "msg": "删除章节成功"
}
/*失败示例*/
{
   "msg": "修改章节信息失败" 
}
/*成功示例*/ 
{
  "msg": "修改章节信息成功", 
}
/*失败示例*/
{
	msg: '获取章节信息失败'
}

/*成功示例*/
{
    msg: '获取章节信息成功'
    data: [
      {
        "active": true,	//除了全部，Linux等等都为false
        "course_name": "全部",
        "course_id": 1, 
        "course_description": "",
        "project_amount": 4, //包含的项目数
        "tag": ["全部"], //所属标签
        "image_url": "/public/images/course_1.jpg", //预览图路径
        "learn_amount": 6666 //已参加学习人数，目前是假数据
        },
      ...
      } 
   ]
},

/*失败示例*/
{
	msg: '获取标签信息失败'
}
/*成功示例*/
{
    msg: '获取标签信息成功'
    data: [
        "Linux",
        "OpenCV",
        "Python",
        "TensorFow",
        "图像识别",
        "语音识别",
        "物联网"
    ]
}
/*失败示例*/
{
	msg: '获取标签信息失败'
}
/*成功示例*/
{
    msg: '获取标签信息成功'
    data: [
        "Linux",
        "OpenCV",
        "Python",
        "TensorFow",
        "图像识别",
        "语音识别",
        "物联网"
    ]
}
/*失败示例*/
{
	msg: '获取分类信息失败'
}
/*成功示例*/
{
    msg: '获取分类信息成功'
    data: [
        {
          "course_name": "linux实训",
          "course_id": 1,
          "course_description": "了解Linux的基本概念及操作，能够熟练使用常用的Linux命令行",
          "project_amount": 4,
            "tag": [
                "Linux"
            ],
          "image_url": "/public/images/course_1.jpg",
          "learn_amount": 6666
        },
      ...
    ]
}
/*失败示例*/
{
   "msg": "上传失败" 
}
/*成功示例*/ 
{
  "msg": "上传成功", 
  "imageUrl": [//顺序为formdata依次添加的先后顺序
    "http://47.96.95.75:7001/public/...", //图片路径
  	
    ...
  ]
}
/*失败示例*/
{
   "msg": "修改项目信息失败" 
}
/*成功示例*/ 

{
  "msg": "修改项目信息成功", 
}
/*失败示例*/
{
   "msg": "删除项目失败" 
}
/*成功示例*/ 
{
   "msg": "删除项目成功"
}
/*失败示例*/
{
   "msg": "新建项目失败" 
}
/*成功示例*/ 
{
  "msg": "新建项目成功", 
  "project_id": 3
}
/*失败示例*/
{
   "msg": "修改项目顺序失败" 
}
/*成功示例*/ 
{
    "msg": "修改项目顺序成功", 
}
/*失败示例*/
{
   "msg": "获取项目信息失败" 
}
/*成功示例*/
{
   "data": {
        "course_id": "1",
        "header": {
            "title": "linux实训",
            "introduction": "了解Linux的基本概念及操作，能够熟练使用常用的Linux命令行"
        },
        "body": {
          	'title': '章节内容',
            'project': [
            	{
                  "project_id": 1
                  "title": "Linux系统简介",
                  "content": "知识点: 1.linux为何物 2.linux历史简介 3.linux重要人物 4.linux与windows的不同 5.如何学习linux"
            	},
            	{
                  "project_id": 2
                  "title": "Linux基本概念及操作",
                  "content": "知识点: 1.Linux基本命令 2.通配符的使用 3.查看帮助文档"
            	},
            	{
                  "project_id": 3
                  "title": "Linux目录结构及文件基本操作",
                  "content": "知识点: 1.每个目录的大体内容 2.文件的属性 3.touch,file,rm,mv等基本命令"
            	},
            	{
                  "project_id": 4
                  "title": "Linux操作命令详解",
                  "content": "知识点: 1.ls、cd、pwd、mkdir等命令的使用"
            	}
        	],
        },	
    },
    "msg": "获取项目信息成功"
}
/*失败示例*/
{
   "msg": "获取项目信息失败" 
}
/*成功示例*/ 
//请求参数请按{course_id: 1,project_id: 1}
{
  "msg": "获取项目信息成功", 
  "data": {
    "course_id": 1,
    "course_name": "linux实训",
    "project_id": 1,
    "project_name": "Linux系统简介",
    "step_amount": 5,
    "steps": [
        "1. 安装Python开发环境",
        "2.Python的变量和类型",
        "3. Python语句",
        "4. Python模块与函数",
        "5. 巩固与提高",
        "6. 知识拓展"
    ], //步骤目录
 	
    // 项目演示视频链接
    "video_url":"/public/videos/1_1.mp4",
    
    // 步骤 md 数组
    "steps_md_array": [
        "## 1. 安装Python开发环境\r\n\r\n### 1. ...",
        "## 2.Python的变量和类型\r\n### 2.1 数据类...",
        "## 3. Python语句\r\n### 3.1 控制流程语...",
        "## 4. Python模块与函数\r\n### 4.1 强大的Python模块...",
        "## 5. 巩固与提高\r\n### 练习一：\r\n编写代码实现华氏温...",
        "## 6. 知识拓展\r\n- 别忘了冒号。一定要记住符合语句首行..."
    ]
    
  }
}
/*失败示例*/
{
   "msg": "上传失败" 
}
/*成功示例*/ 
{
  "msg": "上传成功", 
  "videoUrl": [//顺序为formdata依次添加的先后顺序
    "http://47.96.95.75:7001/public/...", //图片路径
  	
    ...
  ]
}
